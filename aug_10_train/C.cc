// C
// Template generated by oi_helper (https://github.com/onion108/oi_helper)
//

#include <iostream>
#include <algorithm>
#include <vector>

using std::cin;
using std::cout;
using std::endl;


/* Debug Kit Start */

#ifdef __DEBUG__
#define debug_do(__b) __b
#else
#define debug_do(__b)
#endif

/* Debug Kit End */

static const int MAXN = 1e5+114514;

std::vector<int> nodes[MAXN];
int len_to_node[MAXN];
bool visited[MAXN];

void dfs(int n, int parent) {
  if (visited[n]) {
    return;
  }
  if (n != 1) {
    len_to_node[n] = std::min(len_to_node[n], len_to_node[parent] + 1);
  }
  visited[n] = true;
  for (auto i : nodes[n]) {
    dfs(i, n);
  }
  visited[n] = false;
}

int main() {
  int n, m;
  cin >> n >> m;
  bool self_to_self = false;
  for (int i = 0; i < m; i++) {
    int u, v;
    cin >> u >> v;
    if (u == v && v == 1) {
      self_to_self = true;
    }
    nodes[u].push_back(v);
  }  
  memset(len_to_node, 0x7f, (m+7)*sizeof(int));
  len_to_node[1] = self_to_self ? 1 : 0;
  
  dfs(1, -1);
  int t = len_to_node[n];
  int ans = 0;
  while (t) {
    ans += t % 2;
    t /= 2;
  }
  cout << ans << endl;
}

