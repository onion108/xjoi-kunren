// B
// Template generated by oi_helper (https://github.com/onion108/oi_helper)
//

#include <cstring>
#include <iostream>
#include <algorithm>

using std::cin;
using std::cout;
using std::endl;


/* Debug Kit Start */

#ifdef __DEBUG__
#define debug_do(__b) __b
#else
#define debug_do(__b)
#endif

/* Debug Kit End */

using number_t = long long;

struct closed_range_into_t {
  int begin;
  int end;
};

static const int MAXN = 1e5+114514;
number_t seq[MAXN];
int dp[MAXN];
closed_range_into_t ranges[MAXN];

int go_dp_with(int k, int n) {
  dp[1] = seq[1] % k ? 1 : 0;
}

int main() {
  int t;
  cin >> t;
  for (int __unused_counter = 0; __unused_counter < t; __unused_counter++) {
    int k, n;
    cin >> k >> n;
    std::memset(seq, 0x00, sizeof(seq));
    std::memset(dp, 0x00, sizeof(dp));
    // std::memset(ranges, 0x00, sizeof(dp));
    for (int i = 1; i <= n; i++) {
      cin >> seq[i];
    }
    cout << go_dp_with(k, n) << endl;
  }
}

