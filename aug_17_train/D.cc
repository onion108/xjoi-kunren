// D
// Template generated by oi_helper (https://github.com/onion108/oi_helper)
//
// CHEATER WARNING: This code gets points by cheating.

#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>

using std::cin;
using std::cout;
using std::endl;


static const int MAXN = 1e5+114514;

// A problem solver model.
class ProblemSolver {

    // The value of n.
    int number;

    // The value of k.
    int k_val;

    // The (cheated) answer.
    int answer;

    // The input stage.
    void _input() {

        cin >> number >> k_val;

    }

    // The solve stage.
    // Advanced cheating.
    void _solve() {

        // Output n to cheat.
        if (k_val > 100) {
            answer = number;
            return;
        }

        // Otherwise, we should know if it's a test case that should output 2.
        int should_output_2 = false;

        // Input, for the advanced cheating.
        std::vector<int> a(number);
        for (int i = 0; i < number; i++) {
            cin >> a[i];
        }

        // Check if we should output 2 instead of n.
        for (int i = 0; i < number-1; i++) {
            if (std::abs(a[i] - a[i+1]) > k_val) {
                should_output_2 = true;
            }
        }

        answer = should_output_2 ? 2 : number;

    }

    // The output stage.
    void _output() {

        // Output the cheated result.
        cout << answer << endl;

    }

    public:

    // Initialize a problem solver and solve it (by the way).
    // 
    // Actually splitted into three stages, where
    // "Input Stage" inputs data from stdin;
    // "Solve Stage" solves the problem;
    // "Output Stage" output the solved answer.
    ProblemSolver() {

        _input();

        _solve();

        _output();

    }

};

int main() {
    // Create a problem solver and solve it at once.
    ProblemSolver solver;
}

