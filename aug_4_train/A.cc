// A
// Template generated by oi_helper (https://github.com/onion108/oi_helper)
//

#include <iostream>
#include <algorithm>
#include <queue>

using std::cin;
using std::cout;
using std::endl;


/* Debug Kit Start */

#ifdef __DEBUG__
#define debug_do(__b) __b
#else
#define debug_do(__b)
#endif

/* Debug Kit End */

enum class op_code_t {
  op_enqueue = 1,
  op_dequeue,
  op_getlen,
  op_undefined,
};
std::istream& operator>>(std::istream& lhs, op_code_t& rhs) {
  int buffer;
  lhs >> buffer;
  switch (buffer) {
    case 1:
    rhs = op_code_t::op_enqueue;
    break;
    case 2:
    rhs = op_code_t::op_dequeue;
    break;
    case 3:
    rhs = op_code_t::op_getlen;
    break;
    default:
    std::cerr << "Invalid op code: " << buffer << endl;
    rhs = op_code_t::op_undefined;
    break;
  };
  return lhs;
}

static const int MAXN = 1e5+114514;

int main() {
  int operates;
  cin >> operates;
  std::queue<int> q;
  for (int _unused_var = 0; _unused_var < operates; _unused_var++) {
    op_code_t op;
    cin >> op;
    switch (op) {
      case op_code_t::op_enqueue:
      int buf;
      cin >> buf;
      q.push(buf);
      break;
      case op_code_t::op_dequeue:
      if (q.empty()) {
        cout << "Invalid!" << endl;  
      } else {
        cout << q.front() << endl;
        q.pop();
      }
      break;
      case op_code_t::op_getlen:
      cout << q.size() << endl;
      break;
      case op_code_t::op_undefined:
      // Unreachable by default
      cout << "Uncaught exception: UD2 " << endl;
      return -1;
    }
  }
}

