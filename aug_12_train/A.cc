// A
// Template generated by oi_helper (https://github.com/onion108/oi_helper)
//

#include <iostream>
#include <algorithm>
#include <climits>
#include <cmath>

using std::cin;
using std::cout;
using std::endl;


/* Debug Kit Start */

#ifdef __DEBUG__
#define debug_do(__b) __b
#else
#define debug_do(__b)
#endif

/* Debug Kit End */

long long get_div(long long a, long long n) {
  return 2 * a + n - n * n;
}

long long get_diver(long long n) {
  return 2 * n;
}

static const int MAXN = 1e5+114514;

int main() {
  long long a;
  cin >> a;
  a <<= 1;
  long long counter = 0;
  long long detector = std::sqrt(a);

  for (int i = 1; i <= detector; i++) {
    if (a%i == 0) {
      if (i % 2) {
        counter += 1;
      }
      if ((a / i) % 2) {
        counter += 1;
      }
    }
  }  
  // It's easy to prove that there exists x which matches the problem's description when n is equal to 2A.
  counter += 1;
  cout << counter << endl;
}

