// C
// Template generated by oi_helper (https://github.com/onion108/oi_helper)
//

#include <climits>
#include <iostream>
#include <algorithm>
#include <map>
#include <type_traits>

using std::cin;
using std::cout;
using std::endl;


// The integer abstract type.
// This type makes it easier to change the integer type into other types, e.g., `int`, `unsigned long long int`, `short`, etc.
using Number = signed long long int;

// Number should be an integter.
static_assert(std::is_integral<Number>::value, "Number be an integer! ");

// A table of powers of 3. Enough for the given data's range (1e9).
// The prefix `g_` is to remind programmers that this variable is a global variable.
static std::map<Number, bool> g_table {
        {1, true}, 
        {3, true}, 
        {9, true}, 
        {27, true}, 
        {81, true}, 
        {243, true}, 
        {729, true}, 
        {2187, true}, 
        {6561, true}, 
        {19683, true}, 
        {59049, true}, 
        {177147, true}, 
        {531441, true}, 
        {1594323, true}, 
        {4782969, true}, 
        {14348907, true}, 
        {43046721, true}, 
        {129140163, true}, 
        {387420489, true}, 
        {1162261467, true}, 
        {3486784401, true}, 
        {10460353203, true}, 
        {31381059609, true}, 
        {94143178827, true}, 
        {282429536481, true}, 
        {847288609443, true}, 
        {2541865828329, true}, 
        {7625597484987, true}, 
        {22876792454961, true}, 
        {68630377364883, true}, 
        {205891132094649, true}, 
        {617673396283947, true}, 
        {1853020188851841, true}, 
        {5559060566555523, true}, 
        {16677181699666569, true}, 
        {50031545098999707, true}, 
        {150094635296999121, true}, 
        {450283905890997363, true}, 
        {1350851717672992089, true}, 
        {4052555153018976267, true}, 
};

// A problem solver instance.
struct ProblemSolver {

    private:

    // Data area.

    // A field to record if the given number IS the power of 3.
    bool _answer;

    // A field to record the inputted number.
    Number a_number;

    // The init stage. Initialize necessary fields.
    void _init() {

        _answer = false;

        a_number = 0ll;

    }

    // The input stage, input the data from stdin.
    void _input() {

        cin >> a_number;

    }

    // Solve the problem and store and answer into the _answer.
    void _solve() {

        _answer = g_table[a_number];

    }

    // Output problem to the stdout.
    void _output() {

        cout << (_answer ? "YES" : "NO") << endl;

    }

    // Deinitialize stage. Do anything necessary when the instance will be destructed.
    void _deinit() {}

    public:
    
    // Construct a ProblemSolver instance.
    // The lifetime of a ProblemSolver instance has been splitted into five stages, where
    // the Initialize Stage (`ProblemSolver::_init`) do anything necessary to initialize the instance;
    // the Input Stage (`ProblemSolver::_input`) inputs data from the stdin;
    // the Solve Stage (`ProblemSolver::_solve`) solves the problem and store the answer into a private field;
    // the Output Stage (`ProblemSolver::_output`) outputs answer to the stdout;
    // and the Deinitialize Stage (`ProblemSolver::_deinit`) does anything necessary when the instance will be destructed, e.g., close the resources or something.
    ProblemSolver() {

        _init();

    }

    // Start a problem solver.
    void solve() {

        _input();

        _solve();

        _output();

    }

    // The destructor of a ProblemSolver.
    ~ProblemSolver() {

        _deinit();

    }

};

int main() {
    
    // Create multiple ProblemSolvers to response multiple inputs in one test case.
    int _tc_count = 0;
    cin >> _tc_count;

    // Repeat `_tc_count` times.
    for (int __unused_counter = 0; __unused_counter < _tc_count; __unused_counter++) {

        // Create a problem instance.
        ProblemSolver solver;

        // Solve it immediately.
        solver.solve();

    }

}

