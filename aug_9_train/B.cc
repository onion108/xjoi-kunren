// B
// Template generated by oi_helper (https://github.com/onion108/oi_helper)
//

#include <iostream>
#include <algorithm>

using std::cin;
using std::cout;
using std::endl;


/* Debug Kit Start */

#ifdef __DEBUG__
#define debug_do(__b) __b
#else
#define debug_do(__b)
#endif

/* Debug Kit End */

static const int MAXN = 1e5+114514;
int extra_weights[11]; 

struct people_info_t {
  int category_no;
  int no;
  int id;
  int initial_weight;
  int extra_weight;
  int final_weight;
  void calculate(int sorted_no) {
    no = sorted_no;
    category_no = (no-1) % 10 + 1;
    extra_weight = extra_weights[category_no];
    final_weight = initial_weight + extra_weight;
  }
};

people_info_t people[MAXN];

int main() {
  int n, k;
  cin >> n >> k;
  for (int i = 1; i <= 10; i++) {
    cin >> extra_weights[i];
  }
  for (int i = 1; i <= n; i++) {
    cin >> people[i].initial_weight;
    people[i].id = i;
  }
  std::sort(people+1, people+n+1, [](const people_info_t& x, const people_info_t& y) {
    return x.initial_weight > y.initial_weight;
  });
  for (int i = 1; i <= n; i++) {
    people[i].calculate(i);
  }
  std::sort(people+1, people+n+1, [](const people_info_t& x, const people_info_t& y) {
    return x.final_weight > y.final_weight;
  });
  for (int i = 1; i <= k; i++) {
    cout << people[i].id << ' ';
  }
  cout << endl;
}

