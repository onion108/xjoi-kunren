// C
// Template generated by oi_helper (https://github.com/onion108/oi_helper)
//

#include <iostream>
#include <algorithm>

using std::cin;
using std::cout;
using std::endl;


/* Debug Kit Start */

#ifdef __DEBUG__
#define debug_do(__b) __b
#else
#define debug_do(__b)
#endif

/* Debug Kit End */

struct dancing_cow_info_t {
  int cow_id;
  int remaining_time;
};

static const int MAXN = 1e5+114514;
int data[MAXN];
dancing_cow_info_t stage[MAXN];

// Emulating dancing cows with stage that can contains up to k cows at a moment.
int dance_on_stage_supports(int threads_max_count) {
  // An index to record the index of the next cow.
  int next_to_dance = threads_max_count;
  
  // Initialize the stage.
  for (int i = 0; i < threads_max_count; i++) {
    if (data[i] != -1) {
      
      stage[i] = dancing_cow_info_t { i, data[i] };
      
    } else {
      
      // The stage can contain all the cows at the one time, so output the longest time in this cows.
      // The current i is the index of -1 which is past-the-end index.
      // Array `data` starts from 0 so just use i directly.
      auto max = std::max_element(data, data + i);
      return *max;
      
    }
  }
  
  // Initialize the timer.
  int time_count = 0;
  // The cows on the stage.
  int cows_on_stage = threads_max_count;
  
  // Let all the cows dance.
  while (cows_on_stage > 0) {
    // Loop while there is at lease one cow on the stage.
    for (int i = 0; i < threads_max_count; i++) {
      if (stage[i].cow_id != -1) {
        // There IS a cow.
        stage[i].remaining_time -= 1;
        // Check if the cow has used up its time.
        if (stage[i].remaining_time <= 0) {
          // R.I.P the cow
          if (data[next_to_dance] != -1) {
            // Hello, the next cow
            stage[i].cow_id = next_to_dance++;
            stage[i].remaining_time = data[next_to_dance-1];
          } else {
            // Oops! No cows.
            stage[i].cow_id = -1;
            stage[i].remaining_time = -1;
            // From now on, there is one less cow on the stage. How sad!
            cows_on_stage--;
          }
        }
        // Otherwise, the cow should continue dancing until it uses up all its time.
      } else {
        // Cow 404 Not Found
        // The following line is ignorable in theory. But I'd like to add it to improve the readability.
        continue;
      }
    }
    time_count += 1; // Time goes on...
  }
  return time_count; // Return how many time costs.
}

int main() {
  int n, t;
  cin >> n >> t;
  
  for (int i = 0; i < n; i++) {
    cin >> data[i];
  }
  // Tag the end of the data, so we no longer need to pass the n to dance_on_stage_supports(_k).
  data[n] = -1;
  
  // Start binary search.
  int l = 0, r = 1919810;
  while(l < r) {
    // Calculate the middle value.
    int mid = (l+r)/2;
    
    //! Debug outputs. Ignorable.
    debug_do({
      cout << "(l, r, mid) => (" << l << ", " << r << ", " << mid << ")" << endl;
    })
    
    // Calculate the time cost.
    int time_cost = dance_on_stage_supports(mid);
    if (time_cost > t) {
      // The total time is bigger than t, which means the mid is too low.
      l = mid+1;
    } else {
      // Otherwise, the t will be too high or just ok.
      r = mid;
    }
    
    //! Debug outputs. Ignorable.
    debug_do({
      cout << "Updated (l, r) = (" << l << ", " << r << ")" << endl;
    })
  }
  
  // Output the answer.
  cout << l << endl;
}

