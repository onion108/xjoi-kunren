// B
// Template generated by oi_helper (https://github.com/onion108/oi_helper)
//

#include <iostream>
#include <algorithm>
#include <string>
#include <cstdlib>

using std::cin;
using std::cout;
using std::endl;

static const int MAXN = 1e5+114514;
std::string atti_seqs[MAXN];

int attitude[MAXN];
int votes[MAXN];
bool alive[MAXN];
int alive_count = -1;
int m, n;

void vote() {
  for (int i = 1; i <= m; i++) {
    votes[i] = 0;
    if (!alive[i]) votes[i] = MAXN+1;
  }
  for (int i = 1; i <= n; i++) {
    if (!attitude[i]) continue;
    if (!alive[i]) {
      attitude[i] = atti_seqs[i][0] - 0x30;
      atti_seqs[i].erase(atti_seqs[i].begin());
    }
    votes[attitude[i]]++;
  }
  int min = *std::min_element(votes + 1, votes + n +1);
  for (int i = 1; i <= n; i++) {
    if (votes[i] == min) {
      alive[i] = false;
      alive_count--;
      if (alive_count == 0) {
        cout << -min << endl;
        std::exit(-1);
      }
    }
  }
}

int main() {
  cin >> m >> n;
  for (int i = 1; i <= n; i++) {
    cin >> atti_seqs[i];
    attitude[i] = atti_seqs[i][0] - 0x30;
    atti_seqs[i].erase(atti_seqs[i].begin());
  }
  for (int i = 1; i <= m; i++) {
    alive[i] = true;
  }
  alive_count = m;
  while (alive_count != 1) vote();
  for (int i = 1; i <= n; i++) {
    if (alive[i]) {
      cout << i << endl;
      return 0;
    }
  }
}

