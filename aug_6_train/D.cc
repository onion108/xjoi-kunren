// C
// Template generated by oi_helper (https://github.com/onion108/oi_helper)
//

#include <iostream>
#include <algorithm>
#include <cstddef>

using std::cin;
using std::cout;
using std::endl;


/* Debug Kit Start */

#ifdef __DEBUG__
#define debug_do(__b) __b
#else
#define debug_do(__b)
#endif

/* Debug Kit End */



static const int MAXN = 1e5+114514;
static const auto LOOP_SEGMENT = "10110101";

uint64_t how_many_from_a_to_b(uint64_t a, uint64_t b) {
  if (a == b) {
    return LOOP_SEGMENT[(a-1) % 8] - '0';
  }
  if (b-a <= 16) {
    int counter = 0;
    for (int i = a; i <= b; i++) {
      counter += LOOP_SEGMENT[(i-1) % 8] - '0';
    }
    return counter;
  } else {
    a -= 1;
    b -= 1;
    uint64_t loop_start = a + (8ull - (a % 8));
    uint64_t loop_past_the_end = b - (b % 8);
    uint64_t loops = (loop_past_the_end - loop_start) / 8ull;
    int counter = 0;
    for (int i = a; i < loop_start; i++) {
      counter += LOOP_SEGMENT[i % 8] - '0';
    }
    for (int i = b; i >= loop_past_the_end; i--) {
      counter += LOOP_SEGMENT[i % 8] - '0';
    }
    counter += loops * 5;
    return counter;
  }
  return 0ull;
}

int main() {
  int q;
  cin >> q;
  for (int i = 0; i < q; i++) {
    uint64_t a, b;
    cin >> a >> b;
    cout << how_many_from_a_to_b(a, b) << endl;
  }
}

