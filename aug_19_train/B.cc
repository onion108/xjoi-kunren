// B
// Template generated by oi_helper (https://github.com/onion108/oi_helper)
//

#include <iostream>
#include <algorithm>
#include <vector>

using std::cin;
using std::cout;
using std::endl;

// The Problem solver class.
class ProblemSolver {

    // A data from the input.
    std::vector<int> permutation;

    // The Accept stage.
    // This function accepts data from the stdin.
    void _accept() {

        int n;

        // Input the length;
        cin >> n;

        // Loop and input each data.
        for (int i = 0; i < n; i++) {
            
            // Input the current data.
            int __current;
            cin >> __current;
            
            // Add the current data into the next.
            permutation.push_back(__current);

        }

    }

    // The process stage.
    // Gets the next permutation by using std::next_permutation.
    void _process() {

        // Use the std::next_permutation in the standard template library to
        // get the next permutation of the current array.
        std::next_permutation(permutation.begin(), permutation.end());

    }

    // The answer stage.
    // Output the next permutation to stdout.
    // Because std::next_permutation mutates the vector, the next premutation will be stored in the same place. So it's not necessary to create a new vector.
    void _answer() {

        // Iterate over the next permutaion.
        for (auto i : permutation) {
            // Prints the data.
            cout << i << ' ';
        }
        // Prints a newline at the end.
        cout << endl;

    }

    public:

    // Construct a ProblemSolver instance.
    // The Lifetime of the ProblemSolver has been splitted into 3:
    // Accept Stage accepts data from stdin and store them into fields.
    // Solve Stage process the data.
    // Answer Stage outputs the data to the stdout.
    ProblemSolver() {}

    // Solves the problem.
    void solve() {

        // First accepts data from the stdin.
        _accept();

        // Then process the data.
        _process();

        // Finally we output the data to the screen.
        _answer();

    }

};


// The entry point of the program.
int main() {

    ProblemSolver solver;
    solver.solve();

}
